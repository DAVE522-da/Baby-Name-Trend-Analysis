/* STEP 1: ANALYZE HOW THE MOST POPULAR NAMES HAVE CHANGED OVER TIME 
AND IDENTIFY THE NAMES THAT HAVE JUMPED THE MOST IN TERMS OF POPULARITY */

/* 1A: FIND THE TOTAL NUMBER OF BIRTHS FOR EACH FEMALE NAME */
SELECT 
    NAME,                                               
    SUM(BIRTHS) AS NUM_NAMES
FROM 
    NAMES
WHERE 
    GENDER = 'F' 
GROUP BY 
    NAME
ORDER BY 
    NUM_NAMES DESC;

/* 1B: FIND THE TOTAL NUMBER OF BIRTHS FOR EACH MALE NAME */
SELECT 
    GENDER,
    NAME,                                              
    SUM(BIRTHS) AS NUM_NAMES
FROM 
    NAMES
WHERE 
    GENDER = 'M'
GROUP BY 
    GENDER, NAME
ORDER BY 
    NUM_NAMES DESC;

/* 1C: FIND THE POPULARITY RANK OF 'JESSICA' AMONG FEMALE NAMES OVER THE YEARS */
SELECT * 
FROM 
    (WITH GIRL_NAMES AS (
        SELECT 
            YEAR, 
            NAME, 
            SUM(BIRTHS) AS NUM_NAMES
        FROM 
            NAMES
        WHERE 
            GENDER = 'F' 
        GROUP BY 
            YEAR, NAME
    )
    SELECT 
        YEAR, 
        NAME, 
        NUM_NAMES,
        ROW_NUMBER() OVER(PARTITION BY YEAR ORDER BY NUM_NAMES DESC) AS POPULARITY 
    FROM 
        GIRL_NAMES) AS GIRLS_NAMES_RANKED
WHERE 
    NAME = 'JESSICA';

/* 1D: FIND THE POPULARITY RANK OF 'MICHAEL' AMONG MALE NAMES OVER THE YEARS */
SELECT * 
FROM 
    (WITH BOYS_NAMES AS (
        SELECT
            YEAR,
            NAME,
            SUM(BIRTHS) AS NUM_NAMES
        FROM 
            NAMES
        WHERE 
            GENDER = 'M'
        GROUP BY 
            YEAR, NAME
    )
    SELECT 
        YEAR,
        NAME,
        NUM_NAMES,
        ROW_NUMBER() OVER(PARTITION BY YEAR ORDER BY NUM_NAMES DESC) AS POPULARITY
    FROM 
        BOYS_NAMES) AS BOYS_NAMES_RANKED
WHERE 
    NAME = 'MICHAEL';

/* 1E: FIND THE NAMES WITH THE BIGGEST JUMPS IN POPULARITY FROM 1980 TO 2009 */
WITH NAMES_1980 AS (
    SELECT  
        YEAR,
        NAME,
        NUM_NAMES,
        POPULARITY
    FROM 
        (WITH ALL_NAMES AS (
            SELECT
                YEAR,
                NAME,
                SUM(BIRTHS) AS NUM_NAMES
            FROM 
                NAMES
            GROUP BY 
                YEAR, NAME
        )
        SELECT 
            YEAR,
            NAME,
            NUM_NAMES,
            ROW_NUMBER() OVER(PARTITION BY YEAR ORDER BY NUM_NAMES DESC) AS POPULARITY
        FROM 
            ALL_NAMES) AS ALL_NAMES_RANKED
    WHERE 
        YEAR = '1980'
),

NAMES_2009 AS (
    SELECT  
        YEAR,
        NAME,
        NUM_NAMES,
        POPULARITY
    FROM 
        (WITH ALL_NAMES AS (
            SELECT
                YEAR,
                NAME,
                SUM(BIRTHS) AS NUM_NAMES
            FROM 
                NAMES
            GROUP BY 
                YEAR, NAME
        )
        SELECT 
            YEAR,
            NAME,
            NUM_NAMES,
            ROW_NUMBER() OVER(PARTITION BY YEAR ORDER BY NUM_NAMES DESC) AS POPULARITY
        FROM 
            ALL_NAMES) AS ALL_NAMES_RANKED
    WHERE 
        YEAR = '2009'
)

SELECT 
    NAMES_1980.YEAR,
    NAMES_1980.NAME,
    NAMES_1980.NUM_NAMES,
    NAMES_1980.POPULARITY,
    NAMES_2009.YEAR,
    NAMES_2009.NAME,
    NAMES_2009.NUM_NAMES,
    NAMES_2009.POPULARITY,
    CAST(NAMES_2009.POPULARITY AS SIGNED) - CAST(NAMES_1980.POPULARITY AS SIGNED) AS DIFF_POPULARITY
FROM 
    NAMES_1980
INNER JOIN 
    NAMES_2009
ON 
    NAMES_1980.NAME = NAMES_2009.NAME
ORDER BY 
    DIFF_POPULARITY;

/* STEP 2: FIND THE TOP 3 GIRL NAMES AND TOP 3 BOY NAMES FOR EACH YEAR AND FOR EACH DECADE */

/* 2A: FIND THE TOP 3 NAMES FOR EACH YEAR */
WITH NAMES_RANKED AS (
    SELECT 
        YEAR,
        NAME,
        GENDER,
        SUM(BIRTHS) AS NUM_NAMES,
        ROW_NUMBER() OVER(PARTITION BY YEAR, GENDER ORDER BY SUM(BIRTHS) DESC) AS NAMES_RANKED
    FROM 
        NAMES
    GROUP BY 
        YEAR, NAME, GENDER
)
SELECT
    YEAR,
    NAME,
    GENDER,
    NUM_NAMES,
    NAMES_RANKED
FROM 
    NAMES_RANKED
WHERE 
    NAMES_RANKED < 4;

/* 2B: FIND THE TOP 3 NAMES FOR EACH DECADE */
SELECT * 
FROM 
    (WITH NAMES_BY_DECADE AS (
        SELECT 
            CASE
                WHEN YEAR BETWEEN 1980 AND 1989 THEN 'EIGHTIES'
                WHEN YEAR BETWEEN 1990 AND 1999 THEN 'NINETIES'
                WHEN YEAR BETWEEN 2000 AND 2009 THEN 'TWO_THOUSANDS'
                ELSE NULL
            END AS DECADE,
            NAME,
            GENDER,
            SUM(BIRTHS) AS NUM_NAMES
        FROM 
            NAMES
        GROUP BY 
            DECADE, NAME, GENDER
    )
    SELECT
        DECADE,
        NAME,
        GENDER,
        NUM_NAMES,
        ROW_NUMBER() OVER(PARTITION BY DECADE, GENDER ORDER BY NUM_NAMES DESC) AS NAMES_RANKED
    FROM 
        NAMES_BY_DECADE) AS NAMES_RANKED_BY_DECADE
WHERE 
    NAMES_RANKED < 4;

/* STEP 3: FIND THE NUMBER OF BABIES BORN IN EACH REGION AND RETURN THE TOP 3 GIRL AND BOY NAMES WITHIN EACH REGION */

/* 3A: FIND THE TOTAL NUMBER OF BIRTHS IN EACH REGION */
SELECT 
    REGIONS.REGION,
    SUM(NAMES.BIRTHS)
FROM 
    NAMES
LEFT JOIN 
    REGIONS 
ON 
    NAMES.STATE = REGIONS.STATE
GROUP BY 
    REGIONS.REGION;

/* 3B: CLEAN UP THE REGION NAMES AND FIND THE TOTAL NUMBER OF BIRTHS BY REGION */
WITH CLEANED_REGIONS AS (
    SELECT 
        STATE,
        CASE WHEN REGION = 'NEW ENGLAND' THEN 'NEW_ENGLAND' ELSE REGION END AS UPDATED_REGION
    FROM  
        REGIONS
    UNION
    SELECT 
        'MI' AS STATE, 
        'MIDWEST' AS REGION
    FROM 
        REGIONS
)
SELECT
    UPDATED_REGION,
    SUM(BIRTHS) AS NUM_NAMES
FROM 
    CLEANED_REGIONS
LEFT JOIN 
    NAMES
ON 
    CLEANED_REGIONS.STATE = NAMES.STATE
GROUP BY 
    UPDATED_REGION;

/* 3C: FIND THE TOP 3 GIRL AND BOY NAMES FOR EACH REGION */
SELECT * 
FROM 
    (WITH RANKED_NAMES_PER_REGION AS (
        WITH CLEANED_REGIONS AS (
            SELECT 
                STATE,
                CASE WHEN REGION = 'NEW ENGLAND' THEN 'NEW_ENGLAND' ELSE REGION END AS UPDATED_REGION
            FROM  
                REGIONS
            UNION
            SELECT 
                'MI' AS STATE, 
                'MIDWEST' AS REGION
            FROM 
                REGIONS
        )
        SELECT
            UPDATED_REGION,
            NAMES.GENDER,
            NAMES.NAME,
            SUM(BIRTHS) AS NUM_NAMES
        FROM 
            CLEANED_REGIONS
        LEFT JOIN 
            NAMES
        ON 
            CLEANED_REGIONS.STATE = NAMES.STATE
        GROUP BY 
            UPDATED_REGION, NAMES.GENDER, NAMES.NAME
    )
    SELECT
        UPDATED_REGION,
        GENDER,
        NUM_NAMES,
        NAME,
        ROW_NUMBER() OVER(PARTITION BY UPDATED_REGION, GENDER ORDER BY NUM_NAMES DESC) AS RANKED_NAMES
    FROM 
        RANKED_NAMES_PER_REGION) AS TOP_THREE_NAMES_PER_REGION
WHERE 
    RANKED_NAMES < 4;

/* STEP 4: FIND THE MOST POPULAR ANDROGYNOUS NAMES, THE SHORTEST AND LONGEST NAMES, 
AND THE STATE WITH THE HIGHEST PERCENT OF BABIES NAMED 'CHRIS' */

/* 4A: FIND THE MOST POPULAR ANDROGYNOUS NAMES */
SELECT 
    NAME,
    SUM(BIRTHS) AS NUM_NAMES
FROM 
    NAMES
GROUP BY 
    NAME
HAVING 
    COUNT(DISTINCT GENDER) > 1
ORDER BY 
    SUM(BIRTHS) DESC
LIMIT 10;

/* 4B: FIND THE SHORTEST AND LONGEST NAMES BY LENGTH */
SELECT 
    NAME,
    LENGTH(NAME) AS LENGTH_NAME,
    SUM(BIRTHS) AS NUM_NAMES,
    ROW_NUMBER() OVER(PARTITION BY LENGTH(NAME) ORDER BY SUM(BIRTHS) DESC) AS POPULARITY
FROM 
    NAMES
GROUP BY 
    NAME, LENGTH_NAME
ORDER BY  
    LENGTH_NAME;

/* 4C: FIND THE STATE WITH THE HIGHEST PERCENTAGE OF BABIES NAMED 'CHRIS' */
SELECT 
    STATE,
    SUM(BIRTHS) AS NUM_BABIES,
    SUM(CASE WHEN NAME = 'CHRIS' THEN BIRTHS ELSE NULL END) AS NUM_BABIES_CALLED_CHRIS,
    SUM(CASE WHEN NAME = 'CHRIS' THEN BIRTHS ELSE NULL END) / SUM(BIRTHS) * 100 AS PCT_BABIES_CALLED_CHRIS
FROM 
    NAMES
GROUP BY 
    STATE
ORDER BY 
    PCT_BABIES_CALLED_CHRIS DESC;
